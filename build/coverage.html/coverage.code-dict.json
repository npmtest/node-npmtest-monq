{"/home/travis/build/npmtest/node-npmtest-monq/test.js":"/* istanbul instrument in package npmtest_monq */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-monq/lib.npmtest_monq.js":"/* istanbul instrument in package npmtest_monq */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_monq = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_monq = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-monq/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-monq && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_monq */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_monq\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_monq.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_monq.rollup.js'] =\n            local.assetsDict['/assets.npmtest_monq.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_monq.__dirname + '/lib.npmtest_monq.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-monq/node_modules/monq/lib/index.js":"var Connection = require('./connection');\n\nmodule.exports = function (uri, options) {\n    return new Connection(uri, options);\n};","/home/travis/build/npmtest/node-npmtest-monq/node_modules/monq/lib/connection.js":"var mongo = require('mongojs');\nvar job = require('./job');\nvar Queue = require('./queue');\nvar Worker = require('./worker');\n\nmodule.exports = Connection;\n\n/**\n* @constructor\n* @param {string} uri - MongoDB connection string\n* @param {Object} options - connection options\n*/\nfunction Connection(uri, options) {\n    this.db = mongo(uri, [], options);\n}\n\n/**\n* Returns a new {@link Worker}\n* @param {string[]|string} queues - list of queue names, a single queue name, or '*' for a universal worker\n* @param {Object} options - an object with worker options\n*/\nConnection.prototype.worker = function (queues, options) {\n    var self = this;\n\n    options || (options = {});\n\n    var collection = options.collection || 'jobs';\n\n    if (queues === \"*\") {\n        options.universal = true;\n\n        queues = [self.queue('*', {\n          universal: true,\n          collection: collection\n        })];\n    } else {\n        if (!Array.isArray(queues)) {\n            queues = [queues];\n        }\n\n        var queues = queues.map(function (queue) {\n            if (typeof queue === 'string') {\n                queue = self.queue(queue, {\n                  collection: collection\n                });\n            }\n\n            return queue;\n        });\n    }\n\n    return new Worker(queues, options);\n};\n\nConnection.prototype.queue = function (name, options) {\n    return new Queue(this, name, options);\n};\n\nConnection.prototype.close = function () {\n    this.db.close();\n};\n","/home/travis/build/npmtest/node-npmtest-monq/node_modules/monq/lib/job.js":"var events = require('events');\nvar util = require('util');\n\nmodule.exports = Job;\n\n/**\n* Job retry specification\n* @typedef {Object} Job~Attempts\n* @property {string} strategy - Name of {@link Worker~strategyCallback} to use on retry\n* @property {number} count - total number of attempts so far\n* @property {number} delay - a delay constant for use in determining a delay.  In default linear strategy, this will be the delay between attempts\n*/\n\n/**\n* @constructor\n* @param {string} collection - The collection to save the job to\n* @param {Object} data - The Job data\n*/\nfunction Job(collection, data) {\n    this.collection = collection;\n\n    if (data) {\n        // Convert plain object to JobData type\n        data.__proto__ = JobData.prototype;\n        this.data = data;\n    } else {\n        this.data = new JobData();\n    }\n}\n\nutil.inherits(Job, events.EventEmitter);\n\nJob.QUEUED = 'queued';\nJob.DEQUEUED = 'dequeued';\nJob.COMPLETE = 'complete';\nJob.FAILED = 'failed';\nJob.CANCELLED = 'cancelled';\n\nJob.prototype.save = function (callback) {\n    var self = this;\n\n    this.collection.save(this.data, function (err, doc) {\n        if (err) return callback(err);\n\n        if (doc && self.data._id === undefined) {\n            self.data._id = doc._id;\n        }\n\n        callback && callback(null, self);\n    });\n};\n\nJob.prototype.cancel = function (callback) {\n    if (this.data.status !== Job.QUEUED) {\n        return callback(new Error('Only queued jobs may be cancelled'));\n    }\n\n    this.data.status = Job.CANCELLED;\n    this.data.ended = new Date();\n\n    this.save(callback);\n};\n\nJob.prototype.complete = function (result, callback) {\n    this.data.status = Job.COMPLETE;\n    this.data.ended = new Date();\n    this.data.result = result;\n\n    this.save(callback);\n};\n\nJob.prototype.fail = function (err, callback) {\n    this.data.status = Job.FAILED;\n    this.data.ended = new Date();\n    this.data.error = err.message;\n    this.data.stack = err.stack;\n\n    this.save(callback);\n};\n\nJob.prototype.enqueue = function (callback) {\n    if (this.data.delay === undefined) {\n        this.data.delay = new Date();\n    }\n\n    if (this.data.priority === undefined) {\n        this.data.priority = 0;\n    }\n\n    this.data.status = Job.QUEUED;\n    this.data.enqueued = new Date();\n\n    this.save(callback);\n};\n\nJob.prototype.delay = function (delay, callback) {\n    this.data.delay = new Date(new Date().getTime() + delay);\n\n    this.enqueue(callback);\n};\n\nfunction JobData() {}\n\nObject.defineProperty(JobData.prototype, 'id', {\n    get: function () {\n        return this._id && this._id.toString && this._id.toString();\n    }\n});\n","/home/travis/build/npmtest/node-npmtest-monq/node_modules/monq/lib/queue.js":"var mongo = require('mongojs');\nvar db = require('./db');\nvar Job = require('./job');\n\nmodule.exports = Queue;\n\nfunction Queue(connection, name, options) {\n    if (typeof name === 'object' && options === undefined) {\n        options = name;\n        name = undefined;\n    }\n\n    options || (options = {});\n    options.collection || (options.collection = 'jobs');\n    options.universal || (options.universal = false);\n\n    this.connection = connection;\n    this.name = name || 'default';\n    this.options = options;\n\n    this.collection = this.connection.db.collection(this.options.collection);\n\n    if (options.index !== false) {\n        db.index(this.collection);\n    }\n}\n\nQueue.prototype.job = function (data) {\n    return new Job(this.collection, data);\n};\n\nQueue.prototype.get = function (id, callback) {\n    var self = this;\n\n    if (typeof id === 'string') {\n        id = new mongo.ObjectID(id);\n    }\n\n    var query = { _id: id };\n    if (!this.options.universal) {\n        query.queue = this.name;\n    }\n\n    this.collection.findOne(query, function (err, data) {\n        if (err) return callback(err);\n\n        var job = new Job(self.collection, data);\n        callback(null, job);\n    });\n};\n\nQueue.prototype.enqueue = function (name, params, options, callback) {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    var job = this.job({\n        name: name,\n        params: params,\n        queue: this.name,\n        attempts: parseAttempts(options.attempts),\n        timeout: parseTimeout(options.timeout),\n        delay: options.delay,\n        priority: options.priority\n    });\n\n    job.enqueue(callback);\n};\n\nQueue.prototype.dequeue = function (options, callback) {\n    var self = this;\n\n    if (callback === undefined) {\n        callback = options;\n        options = {};\n    }\n\n    var query = {\n        status: Job.QUEUED,\n        delay: { $lte: new Date() }\n    };\n\n    if (!this.options.universal) {\n        query.queue = this.name;\n    }\n\n    if (options.minPriority !== undefined) {\n        query.priority = { $gte: options.minPriority };\n    }\n\n    if (options.callbacks !== undefined) {\n        var callback_names = Object.keys(options.callbacks);\n        query.name = { $in: callback_names };\n    }\n\n    var sort = {\n        'priority': -1,\n        '_id': 1\n    };\n\n    var update = { $set: { status: Job.DEQUEUED, dequeued: new Date() }};\n\n    this.collection.findAndModify({\n        query: query,\n        sort: sort,\n        update: update,\n        new: true\n    }, function (err, doc) {\n        if (err) return callback(err);\n        if (!doc) return callback();\n\n        callback(null, self.job(doc));\n    });\n};\n\n// Helpers\n\nfunction parseTimeout(timeout) {\n    if (timeout === undefined) return undefined;\n    return parseInt(timeout, 10);\n}\n\nfunction parseAttempts(attempts) {\n    if (attempts === undefined) return undefined;\n\n    if (typeof attempts !== 'object') {\n        throw new Error('attempts must be an object');\n    }\n\n    var result = {\n        count: parseInt(attempts.count, 10)\n    };\n\n    if (attempts.delay !== undefined) {\n        result.delay = parseInt(attempts.delay, 10);\n        result.strategy = attempts.strategy;\n    }\n\n    return result;\n}\n","/home/travis/build/npmtest/node-npmtest-monq/node_modules/monq/lib/db.js":"exports.index = function (collection) {\n    collection.getIndexes(function(err, indexes) {\n        if (err) {\n            if (err.code === 26) { \n                // MongoError: no collection\n                return;\n            } \n            return console.log(err);\n        }\n\n        dropIndex('status_1_queue_1_enqueued_1');\n        dropIndex('status_1_queue_1_enqueued_1_delay_1');\n\n        function dropIndex(name) {\n            if (indexes.some(function(index) { return index.name == name; })) {\n                collection.dropIndex(name, function(err) {\n                    if (err) { console.error(err); }\n                });\n            }\n        }\n    });\n\n    // Ensures there's a reasonable index for the poling dequeue\n    // Status is first b/c querying by status = queued should be very selective\n    collection.ensureIndex({ status: 1, queue: 1, priority: -1, _id: 1, delay: 1 }, function (err) {\n        if (err) console.error(err);\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-monq/node_modules/monq/lib/worker.js":"var events = require('events');\nvar util = require('util');\nvar Queue = require('./queue');\n\nmodule.exports = Worker;\n\n/**\n* Options for a new worker\n* @typedef {Object} Worker~Options\n* @property {Number} interval - the polling interval for the worker. Note: The worker will process jobs, one at a time, as fast as possible while queues have waiting jobs\n* @property {Worker~Strategies} strategies - {@link Worker~Strategies} for retrying jobs\n* @property {Worker~Callbacks} callbacks - Map of {@link Worker~Callback} for processing jobs\n* @property {Number} minPriority - The lowest job priority the worker will process\n*/\n\n/**\n* @constructor\n* @param {string[]} queues - an array of queue names that this worker will listen for\n* @param {Worker~Options} options - {@link Worker~Options} Options object \n*/\nfunction Worker(queues, options) {\n    options || (options = {});\n\n    this.empty = 0;\n    this.queues = queues || [];\n    this.interval = options.interval || 5000;\n\n    this.callbacks = options.callbacks || {};\n    this.strategies = options.strategies || {};\n    this.universal = options.universal || false;\n\n    // Default retry strategies\n    this.strategies.linear || (this.strategies.linear = linear);\n    this.strategies.exponential || (this.strategies.exponential = exponential);\n\n    // This worker will only process jobs of this priority or higher\n    this.minPriority = options.minPriority;\n\n}\n\nutil.inherits(Worker, events.EventEmitter);\n\n/**\n* Job handler functions should take this form\n* @callback Worker~Callback\n* @param {Job.params} params - {@link Job.params} object for the job to be processed \n* @param {Function} callback - NodeJS style callback to be invoked when job processing is finished\n*/\n\n/**\n* Sets handlers to be invoked for each queue that the worker is listening to\n* @param {Object} callbacks - map of {@link Worker~Callback} objects. Keys are the name of the queue, values are the handlers for those queues\n*/\nWorker.prototype.register = function (callbacks) {\n    for (var name in callbacks) {\n        this.callbacks[name] = callbacks[name];\n    }\n};\n\n/**\n* A map of {@link Worker~StrategyCallback}s\n* @typedef {Object} Worker~Strategies\n*/\n\n/**\n* @callback Worker~StrategyCallback\n* @param {Job~Attempts} attempts - {@link Job~Attempts} object\n* @returns {Number} delay time\n*/\n\nWorker.prototype.strategies = function (strategies) {\n    for (var name in strategies) {\n        this.strategies[name] = strategies[name];\n    }\n};\n\n\n/**\n* Starts the worker.  If no queues have been specified yet, this will loop\n*/\nWorker.prototype.start = function () {\n    if (this.queues.length === 0) {\n        return setTimeout(this.start.bind(this), this.interval);\n    }\n    this.working = true;\n    this.poll();\n};\n\n/**\n* Stops the worker\n*/\nWorker.prototype.stop = function (callback) {\n    var self = this;\n\n    function done() {\n        if (callback) callback();\n    }\n\n    if (!this.working) done();\n    this.working = false;\n\n    if (this.pollTimeout) {\n      clearTimeout(this.pollTimeout);\n      this.pollTimeout = null;\n      return done();\n    }\n\n    this.once('stopped', done);\n};\n\n/**\n* Adds a queue for the worker to listen on\n* @param {string} queue - the name of the queue to add\n*/\nWorker.prototype.addQueue = function (queue) {\n  if (!this.universal)\n    this.queues.push(queue);\n};\n\nWorker.prototype.poll = function () {\n    if (!this.working) {\n        return this.emit('stopped');\n    }\n\n    var self = this;\n\n    this.dequeue(function (err, job) {\n        if (err) return self.emit('error', err);\n\n        if (job) {\n            self.empty = 0;\n            self.emit('dequeued', job.data);\n            self.work(job);\n        } else {\n            self.emit('empty');\n\n            if (self.empty < self.queues.length) {\n                self.empty++;\n            }\n\n            if (self.empty === self.queues.length) {\n                // All queues are empty, wait a bit\n                self.pollTimeout = setTimeout(function () {\n                    self.pollTimeout = null;\n                    self.poll();\n                }, self.interval);\n            } else {\n                self.poll();\n            }\n        }\n    });\n};\n\nWorker.prototype.dequeue = function (callback) {\n    var queue = this.queues.shift();\n    this.queues.push(queue);\n    queue.dequeue({ minPriority: this.minPriority, callbacks: this.callbacks }, callback);\n};\n\nWorker.prototype.work = function (job) {\n    var self = this;\n    var finished = false;\n\n    if (job.data.timeout) {\n        var timer = setTimeout(function () {\n            done(new Error('timeout'));\n        }, job.data.timeout);\n    }\n\n    function done(err, result) {\n        // It's possible that this could be called twice in the case that a job times out,\n        // but the handler ends up finishing later on\n        if (finished) {\n            return;\n        } else {\n            finished = true;\n        }\n\n        clearTimeout(timer);\n        self.emit('done', job.data);\n\n        if (err) {\n            self.error(job, err, function (err) {\n                if (err) return self.emit('error', err);\n\n                self.emit('failed', job.data);\n                self.poll();\n            });\n        } else {\n            job.complete(result, function (err) {\n                if (err) return self.emit('error', err);\n\n                self.emit('complete', job.data);\n                self.poll();\n            });\n        }\n    };\n\n    this.process(job.data, done);\n};\n\nWorker.prototype.process = function (data, callback) {\n    var func = this.callbacks[data.name];\n\n    if (!func) {\n        callback(new Error('No callback registered for `' + data.name + '`'));\n    } else {\n        func(data.params, callback);\n    }\n};\n\nWorker.prototype.error = function (job, err, callback) {\n    var attempts = job.data.attempts;\n    var remaining = 0;\n\n    if (attempts) {\n        remaining = attempts.remaining = (attempts.remaining || attempts.count) - 1;\n    }\n\n    if (remaining > 0) {\n        var strategy = this.strategies[attempts.strategy || 'linear'];\n        if (!strategy) {\n            strategy = linear;\n\n            console.error('No such retry strategy: `' + attempts.strategy + '`');\n            console.error('Using linear strategy');\n        }\n\n        if (attempts.delay !== undefined) {\n            var wait = strategy(attempts);\n        } else {\n            var wait = 0;\n        }\n\n        job.delay(wait, callback)\n    } else {\n        job.fail(err, callback);\n    }\n};\n\n// Strategies\n// ---------------\n\nfunction linear(attempts) {\n    return attempts.delay;\n}\n\nfunction exponential(attempts) {\n    return attempts.delay * (attempts.count - attempts.remaining);\n}\n"}